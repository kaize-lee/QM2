# -*- coding: utf-8 -*-
"""summary visualisations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xuQoo_nFkoAwyKD88YFPYBDoXwao84dx

## Summary Statistics: Visualisations
"""

import pandas as pd 
import matplotlib.pyplot as plt 
import numpy as np 
import seaborn as sns

"""Simple bar graph:"""

#bar chart on violent crime 

# downloading data and pulling out csv values 

path = r'drive/MyDrive/DATAIE/'
filename = r'Book5.csv'
df = pd.read_csv(path+filename)

plt.figure(figsize=(cm_to_inch(30), cm_to_inch(25)))

x= df['year'].dropna()
h= df['violentmean'].dropna()
plt.bar(x,h, width=0.6, bottom=0, color="red")
plt.xlabel("Year", fontsize='14') 
plt.ylabel("Mean recorded violent crime across London (per 1000 people)", fontsize='14')
plt.title("Mean recorded violent crime across London from 2011-2018", fontsize='16', color="black")

plt.show()

#bar chart on officers  

path = r'drive/MyDrive/DATAIE/'
filename = r'Book10.csv'
df = pd.read_csv(path+filename)

plt.figure(figsize=(cm_to_inch(30), cm_to_inch(25)))

x= df['Year'].dropna()
h= df['officers'].dropna()
plt.bar(x,h, width=0.6, bottom=0, color="blue")
plt.xlabel("Year", fontsize='14') 
plt.ylabel("Average number of officers per 1000 of the population across London boroughs", fontsize='12')
plt.title("Average Number of officers per 1000 of the population across the London boroughs (2011-2018)", fontsize='16', color="black")

plt.show()

#bar chart on stop and searches 

 r'drive/MyDrive/DATAIE/'
filename = r'Book10.csv'
df = pd.read_csv(path+filename)

plt.figure(figsize=(cm_to_inch(30), cm_to_inch(25)))

x= df['Year'].dropna()
h= df['stops'].dropna()
plt.bar(x,h, width=0.6, bottom=0, color="orange")
plt.xlabel("Year", fontsize='14') 
plt.ylabel("Average number of stop and searches per 1000 of the population across London boroughs", fontsize='12')
plt.title("Average number of stop and searches per 1000 of the population across the London boroughs (2011-2018)", fontsize='16', color="black")

plt.show()

#bar chart on happiness 

path = r'drive/MyDrive/DATAIE/'
filename = r'Book10.csv'
df = pd.read_csv(path+filename)

plt.figure(figsize=(cm_to_inch(30), cm_to_inch(25)))

x= df['Year'].dropna()
h= df['happiness'].dropna()
plt.bar(x,h, width=0.6, bottom=0, color="pink")
plt.xlabel("Year", fontsize='14') 
plt.ylabel("Average level of subjective happiness across the London boroughs, measured from 1-10", fontsize='12')
plt.title("Average level of subjective happiness across the London boroughs, measured from 1-10 (2011-2018)", fontsize='16', color="black")

plt.show()

#bar chart on number of pubs and clubs  

path = r'drive/MyDrive/DATAIE/'
filename = r'Book10.csv'
df = pd.read_csv(path+filename)

plt.figure(figsize=(cm_to_inch(30), cm_to_inch(25)))

x= df['Year'].dropna()
h= df['pub'].dropna()
plt.bar(x,h, width=0.6, bottom=0, color="purple")
plt.xlabel("Year", fontsize='14') 
plt.ylabel("Average number of pubs and clubs per 1000 of the population across the London boroughs", fontsize='12')
plt.title("Average number of pubs and clubs per 1000 of the population across the London boroughs (2011-2018)", fontsize='16', color="black")

plt.show()

#bar chart on income 

path = r'drive/MyDrive/DATAIE/'
filename = r'incomemean.csv'
df = pd.read_csv(path+filename)

plt.figure(figsize=(cm_to_inch(30), cm_to_inch(25)))

x= df['Year'].dropna()
h= df['meanincome'].dropna()
plt.bar(x,h, width=0.6, bottom=0, color="green")
plt.xlabel("Year", fontsize='14') 
plt.ylabel("Average total weekly income across London", fontsize='14')
plt.title("Average total weekly income across London from 2011-2018", fontsize='16', color="black")

plt.show()

"""Multipanel plot: """

# download the libraries 

import pandas as pd 
import matplotlib.pyplot as plot  
import matplotlib.gridspec as gridspec # allows us to break up the data using grids 
import numpy as py
import matplotlib as mpl
mpl.rcParams['pdf.fonttype'] = 42

# download the data from google drive and put it into this dataframe 

path = r'drive/MyDrive/DATAIE/'
filename = r'multipanel.csv'
df = pd.read_csv(path+filename)

# pull the data from the csv 
# assign each column as an x or y variable for each panel  

x = df['X  YEAR '].dropna()
y = df['Y violentcrime_mean'].dropna()
x_min = df['X  YEAR_min'].dropna()
y_min = df['Y violentcrime_min '].dropna()
x_max = df['X YEAR_max '].dropna() 
y_max = df['Y violentcrime_max '].dropna()

x1 = df['X1 year '].dropna()
y1 = df['Y1 stops_mean'].dropna()
x1_min = df['X1 year_min'].dropna()
y1_min = df['Y1 stops_min'].dropna()
x1_max = df['X1 year_max'].dropna() 
y1_max = df['Y1 stops_max '].dropna()

x2 = df['X2 year '].dropna()
y2 = df['Y2 officers '].dropna()
x2_min = df['X2 year_min'].dropna()
y2_min = df['Y2 officers_min'].dropna()
x2_max = df['X2 year_max'].dropna() 
y2_max = df['Y2 officers_max'].dropna()

# set the limits of the plots for the data set, for this dataset it makes sense that they have a common axis 

xmin= 2011 
xmax= 2018 
ymin= 0 
ymax=300

# generate some interesting colours 

seshadri = ['#c3121e', '#0348a1', '#ffb01c', '#027608', '#0193b0', '#9c5300']

# plotting the figure and assigning it as size 

fig = plt.figure(1, figsize=(12,12))

# Form plot into a grid, in this case i choose to divide the figure canvas into 6 rows and 3 columns 
gs = gridspec.GridSpec(6,3)

# allows you to apply spacing between the figures 

gs.update(wspace=0.25, hspace=0.5)

# code for generating the first panel 

xtr_subsplot = fig.add_subplot(gs[0:2,0:3]) # using gridspec to assign the area where this subplot goes 
plt.plot(x1, y1, linestyle='--', marker='o', label='Stop and search mean', color=seshadri[0])
plt.plot(x1_min, y1_min, linestyle='-', marker='o', label='Stop and search min', color=seshadri[1])
plt.plot(x1_max, y1_max, linestyle='-', marker='o', label='Stop and search max', color=seshadri[2])

# assigning which axes to apply the tick marks (but allowing pylot to place them independently) + assigning the title of the graph 

plt.tick_params(direction='in', right=True, top=True)
plt.tick_params(labelbottom=False, labeltop=False, labelright=False, labelleft=True)

plt.minorticks_on()
plt.tick_params(direction='in', which='minor', length=5, bottom=False, left=False, top=False, right=False)
plt.tick_params(direction='out', which='major', length=10, bottom=True, left=True, top=False, right=False)

plt.legend()
plt.xlim(xmin,xmax)
plt.title('A multipanel plot to show the mean, minimum and maximum trends of our crime and policing datasets from 2011-2018 (per 1000 of the population)')

# code for second panel (same for first but changing the gridspec to the 2-4th row)

xtr_subsplot = fig.add_subplot(gs[2:4,0:3])
plt.plot(x, y, linestyle='--', marker='o', label='Violent crime mean', color=seshadri[0])
plt.plot(x_min, y_min, linestyle='-', marker='o', label='Violent crime min', color=seshadri[1])
plt.plot(x_max, y_max, linestyle='-', marker='o', label='Violent crime max', color=seshadri[2])

plt.tick_params(direction='in', right=True, top=True)
plt.tick_params(labelbottom=False, labeltop=False, labelright=False, labelleft=True)

plt.minorticks_on()
plt.tick_params(direction='in', which='minor', length=5, bottom=False, left=False, top=False, right=False)
plt.tick_params(direction='out', which='major', length=10, bottom=True, left=True, top=False, right=False)

plt.legend()
plt.xlim(xmin,xmax)
plt.ylabel('Number per 1000 of the population', fontsize='12')

# code for third panel (same for first but changing the gridspec to the 4-6th row)

xtr_subsplot = fig.add_subplot(gs[4:6,0:3])
plt.plot(x2, y2, linestyle='--', marker='o', label='Number of officers mean', color=seshadri[0])
plt.plot(x2_min, y2_min, linestyle='-', marker='o', label='Number of officers min', color=seshadri[1])
plt.plot(x2_max, y2_max, linestyle='-', marker='o', label='Number of officers max', color=seshadri[2])

plt.tick_params(direction='in', right=True, top=True)
plt.tick_params(labelbottom=True, labeltop=False, labelright=False, labelleft=True)

plt.minorticks_on()
plt.tick_params(direction='out', which='minor', length=5, bottom=False, left=False, top=False, right=False)
plt.tick_params(direction='out', which='major', length=10, bottom=True, left=True, top=False, right=False)

plt.xlabel('Year', fontsize='14')

plt.legend()
plt.xlim(xmin,xmax)

plt.show()

#assistance on this code: Taylor Sparks youtube video https://www.youtube.com/watch?v=g7CfguXkfdk

